name: Update Multi-Models

on:
  workflow_dispatch

jobs:
  testing:
    runs-on: ubuntu-latest

    env:
      token: ${{ secrets.WORKFLOW_TOKEN }}
      # GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
        # # ref: main
            lfs: true
            repository: Azure/azure-ai-model-catalog
            branch: main
        # #     git config global init.defaultBranch main
            token: ${{ secrets.WORKFLOW_TOKEN }}


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r runs_requirements.txt
      # - name: Run Python Script
      #   run: |
      #     cd dashboard/HuggingFace/Dashboard_Archive
      #     python dashboard.py
      - name: Run Python Script from other folder to create modelstatus.txt in main folder
        run: |
          cd tests/src/pipeline_component_automation
          python generic_eval_log.py
      - name: Add Generated File
        run: |
          git config user.email "${{ secrets.USER_EMAIL }}"
          git config user.name "${{ secrets.USER_NAME }}"
          git pull origin main
          cd dashboard/HuggingFace
          git add modelstatus.txt         
          # Attempt to commit changes and handle errors
          set +e
          git commit -m "modelstatus.txt"
          commit_status=$?
          set -e
          if [ $commit_status -eq 0 ]; then
            git push
          else
            echo "No changes to commit or there was an error. Skipping commit and push."
          fi
          
      # - name: Add Generated File to Archive with datestamp
      #   run: |
      #     git config user.email "${{ secrets.USER_EMAIL }}"
      #     git config user.name "${{ secrets.USER_NAME }}"
      #     git pull origin main
      #     cd dashboard/HuggingFace/Dashboard_Archive
      #     # Get the current date and time (again)
      #     current_date=$(date +"%Y%m%d")
      #     # Create a README file with the current datetime in the filename
      #     readme_filename="README_${current_date}.md"
      #     # Add the generated README file
      #     git add "$readme_filename"
      #     set +e
      #     # Commit and push the changes
      #     git commit -m "Add $me_filename"
      #     commit_status=$?
      #     set -e
      #     if [ $commit_status -eq 0 ]; then
      #         git push
      #     else
      #       echo "No changes to commit or there was an error. Skipping commit and push."
      #     fi
        
